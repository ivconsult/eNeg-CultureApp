//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace citPOINT.CultureApp.Data.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'ConversationCulture' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.CultureApp.Data.Web")]
    public sealed partial class ConversationCulture : Entity
    {
        
        private Guid _conversationCultureID;
        
        private Nullable<Guid> _conversationID;
        
        private EntityRef<CultureFiveDimension> _cultureFiveDimension;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private Nullable<int> _partnerCultureID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnConversationCultureIDChanging(Guid value);
        partial void OnConversationCultureIDChanged();
        partial void OnConversationIDChanging(Nullable<Guid> value);
        partial void OnConversationIDChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnPartnerCultureIDChanging(Nullable<int> value);
        partial void OnPartnerCultureIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationCulture"/> class.
        /// </summary>
        public ConversationCulture()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationCultureID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ConversationCultureID
        {
            get
            {
                return this._conversationCultureID;
            }
            set
            {
                if ((this._conversationCultureID != value))
                {
                    this.OnConversationCultureIDChanging(value);
                    this.ValidateProperty("ConversationCultureID", value);
                    this._conversationCultureID = value;
                    this.RaisePropertyChanged("ConversationCultureID");
                    this.OnConversationCultureIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationID' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> ConversationID
        {
            get
            {
                return this._conversationID;
            }
            set
            {
                if ((this._conversationID != value))
                {
                    this.OnConversationIDChanging(value);
                    this.RaiseDataMemberChanging("ConversationID");
                    this.ValidateProperty("ConversationID", value);
                    this._conversationID = value;
                    this.RaiseDataMemberChanged("ConversationID");
                    this.OnConversationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="CultureFiveDimension"/> entity.
        /// </summary>
        [Association("CultureFiveDimension_ConversationCulture", "PartnerCultureID", "CultureID", IsForeignKey=true)]
        [XmlIgnore()]
        public CultureFiveDimension CultureFiveDimension
        {
            get
            {
                if ((this._cultureFiveDimension == null))
                {
                    this._cultureFiveDimension = new EntityRef<CultureFiveDimension>(this, "CultureFiveDimension", this.FilterCultureFiveDimension);
                }
                return this._cultureFiveDimension.Entity;
            }
            set
            {
                CultureFiveDimension previous = this.CultureFiveDimension;
                if ((previous != value))
                {
                    this.ValidateProperty("CultureFiveDimension", value);
                    if ((previous != null))
                    {
                        this._cultureFiveDimension.Entity = null;
                        previous.ConversationCultures.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PartnerCultureID = value.CultureID;
                    }
                    else
                    {
                        this.PartnerCultureID = default(Nullable<int>);
                    }
                    this._cultureFiveDimension.Entity = value;
                    if ((value != null))
                    {
                        value.ConversationCultures.Add(this);
                    }
                    this.RaisePropertyChanged("CultureFiveDimension");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PartnerCultureID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> PartnerCultureID
        {
            get
            {
                return this._partnerCultureID;
            }
            set
            {
                if ((this._partnerCultureID != value))
                {
                    this.OnPartnerCultureIDChanging(value);
                    this.RaiseDataMemberChanging("PartnerCultureID");
                    this.ValidateProperty("PartnerCultureID", value);
                    this._partnerCultureID = value;
                    this.RaiseDataMemberChanged("PartnerCultureID");
                    this.OnPartnerCultureIDChanged();
                }
            }
        }
        
        private bool FilterCultureFiveDimension(CultureFiveDimension entity)
        {
            return (entity.CultureID == this.PartnerCultureID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._conversationCultureID;
        }
    }
    
    /// <summary>
    /// The 'Culture' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.CultureApp.Data.Web")]
    public sealed partial class Culture : Entity
    {
        
        private int _cultureID;
        
        private string _cultureName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCultureIDChanging(int value);
        partial void OnCultureIDChanged();
        partial void OnCultureNameChanging(string value);
        partial void OnCultureNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Culture"/> class.
        /// </summary>
        public Culture()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CultureID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CultureID
        {
            get
            {
                return this._cultureID;
            }
            set
            {
                if ((this._cultureID != value))
                {
                    this.OnCultureIDChanging(value);
                    this.ValidateProperty("CultureID", value);
                    this._cultureID = value;
                    this.RaisePropertyChanged("CultureID");
                    this.OnCultureIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CultureName' value.
        /// </summary>
        [DataMember()]
        public string CultureName
        {
            get
            {
                return this._cultureName;
            }
            set
            {
                if ((this._cultureName != value))
                {
                    this.OnCultureNameChanging(value);
                    this.RaiseDataMemberChanging("CultureName");
                    this.ValidateProperty("CultureName", value);
                    this._cultureName = value;
                    this.RaiseDataMemberChanged("CultureName");
                    this.OnCultureNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._cultureID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'CultureAppService' domain service.
    /// </summary>
    public sealed partial class CultureAppContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CultureAppContext"/> class.
        /// </summary>
        public CultureAppContext() : 
                this(new WebDomainClient<ICultureAppServiceContract>(new Uri("citPOINT-CultureApp-Data-Web-CultureAppService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CultureAppContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CultureAppService service URI.</param>
        public CultureAppContext(Uri serviceUri) : 
                this(new WebDomainClient<ICultureAppServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CultureAppContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public CultureAppContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ConversationCulture"/> entities that have been loaded into this <see cref="CultureAppContext"/> instance.
        /// </summary>
        public EntitySet<ConversationCulture> ConversationCultures
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ConversationCulture>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CultureFiveDimension"/> entities that have been loaded into this <see cref="CultureAppContext"/> instance.
        /// </summary>
        public EntitySet<CultureFiveDimension> CultureFiveDimensions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CultureFiveDimension>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Culture"/> entities that have been loaded into this <see cref="CultureAppContext"/> instance.
        /// </summary>
        public EntitySet<Culture> Cultures
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Culture>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DomainCultureMapping"/> entities that have been loaded into this <see cref="CultureAppContext"/> instance.
        /// </summary>
        public EntitySet<DomainCultureMapping> DomainCultureMappings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DomainCultureMapping>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NegotiationCulture"/> entities that have been loaded into this <see cref="CultureAppContext"/> instance.
        /// </summary>
        public EntitySet<NegotiationCulture> NegotiationCultures
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NegotiationCulture>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ConversationCulture"/> entities using the 'GetConversationCultures' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ConversationCulture"/> entities.</returns>
        public EntityQuery<ConversationCulture> GetConversationCulturesQuery()
        {
            this.ValidateMethod("GetConversationCulturesQuery", null);
            return base.CreateQuery<ConversationCulture>("GetConversationCultures", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CultureFiveDimension"/> entities using the 'GetCultureFiveDimensions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CultureFiveDimension"/> entities.</returns>
        public EntityQuery<CultureFiveDimension> GetCultureFiveDimensionsQuery()
        {
            this.ValidateMethod("GetCultureFiveDimensionsQuery", null);
            return base.CreateQuery<CultureFiveDimension>("GetCultureFiveDimensions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CultureFiveDimension"/> entities using the 'GetCultureFiveDimensionsForTwoCultures' query.
        /// </summary>
        /// <param name="UserCultureID">The value for the 'UserCultureID' parameter of the query.</param>
        /// <param name="OtherCultureID">The value for the 'OtherCultureID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CultureFiveDimension"/> entities.</returns>
        public EntityQuery<CultureFiveDimension> GetCultureFiveDimensionsForTwoCulturesQuery(Nullable<int> UserCultureID, int OtherCultureID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserCultureID", UserCultureID);
            parameters.Add("OtherCultureID", OtherCultureID);
            this.ValidateMethod("GetCultureFiveDimensionsForTwoCulturesQuery", parameters);
            return base.CreateQuery<CultureFiveDimension>("GetCultureFiveDimensionsForTwoCultures", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Culture"/> entities using the 'GetCultures' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Culture"/> entities.</returns>
        public EntityQuery<Culture> GetCulturesQuery()
        {
            this.ValidateMethod("GetCulturesQuery", null);
            return base.CreateQuery<Culture>("GetCultures", null, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DomainCultureMapping"/> entities using the 'GetDomainCultureMappings' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DomainCultureMapping"/> entities.</returns>
        public EntityQuery<DomainCultureMapping> GetDomainCultureMappingsQuery()
        {
            this.ValidateMethod("GetDomainCultureMappingsQuery", null);
            return base.CreateQuery<DomainCultureMapping>("GetDomainCultureMappings", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationCulture"/> entities using the 'GetNegotiationCultures' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationCulture"/> entities.</returns>
        public EntityQuery<NegotiationCulture> GetNegotiationCulturesQuery()
        {
            this.ValidateMethod("GetNegotiationCulturesQuery", null);
            return base.CreateQuery<NegotiationCulture>("GetNegotiationCultures", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetConversationPartnerCulture' method of the domain service.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetConversationPartnerCulture(Guid conversationID, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            this.ValidateMethod("GetConversationPartnerCulture", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetConversationPartnerCulture", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetConversationPartnerCulture' method of the domain service.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetConversationPartnerCulture(Guid conversationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            this.ValidateMethod("GetConversationPartnerCulture", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetConversationPartnerCulture", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SendAppsStatisticalsMessages' method of the domain service.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
        /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
        /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
        /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> SendAppsStatisticalsMessages(string AppName, Guid UserID, Guid conversationID, string messageContent, string messageSubject, string messageSender, string messageReceiver, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("messageContent", messageContent);
            parameters.Add("messageSubject", messageSubject);
            parameters.Add("messageSender", messageSender);
            parameters.Add("messageReceiver", messageReceiver);
            this.ValidateMethod("SendAppsStatisticalsMessages", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("SendAppsStatisticalsMessages", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SendAppsStatisticalsMessages' method of the domain service.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
        /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
        /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
        /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> SendAppsStatisticalsMessages(string AppName, Guid UserID, Guid conversationID, string messageContent, string messageSubject, string messageSender, string messageReceiver)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("messageContent", messageContent);
            parameters.Add("messageSubject", messageSubject);
            parameters.Add("messageSender", messageSender);
            parameters.Add("messageReceiver", messageReceiver);
            this.ValidateMethod("SendAppsStatisticalsMessages", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("SendAppsStatisticalsMessages", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateUserCulture' method of the domain service.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <param name="cultureID">The value for the 'cultureID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateUserCulture(Guid userID, int cultureID, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("cultureID", cultureID);
            this.ValidateMethod("UpdateUserCulture", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateUserCulture", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateUserCulture' method of the domain service.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <param name="cultureID">The value for the 'cultureID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateUserCulture(Guid userID, int cultureID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("cultureID", cultureID);
            this.ValidateMethod("UpdateUserCulture", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateUserCulture", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CultureAppContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CultureAppService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface ICultureAppServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetConversationCultures' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CultureAppService/GetConversationCulturesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CultureAppService/GetConversationCultures", ReplyAction="http://tempuri.org/CultureAppService/GetConversationCulturesResponse")]
            [WebGet()]
            IAsyncResult BeginGetConversationCultures(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConversationCultures'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConversationCultures'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetConversationCultures' operation.</returns>
            QueryResult<ConversationCulture> EndGetConversationCultures(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConversationPartnerCulture' operation.
            /// </summary>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CultureAppService/GetConversationPartnerCultureDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CultureAppService/GetConversationPartnerCulture", ReplyAction="http://tempuri.org/CultureAppService/GetConversationPartnerCultureResponse")]
            IAsyncResult BeginGetConversationPartnerCulture(Guid conversationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConversationPartnerCulture'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConversationPartnerCulture'.</param>
            /// <returns>The 'Int32' returned from the 'GetConversationPartnerCulture' operation.</returns>
            int EndGetConversationPartnerCulture(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCultureFiveDimensions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CultureAppService/GetCultureFiveDimensionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CultureAppService/GetCultureFiveDimensions", ReplyAction="http://tempuri.org/CultureAppService/GetCultureFiveDimensionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCultureFiveDimensions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCultureFiveDimensions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCultureFiveDimensions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCultureFiveDimensions' operation.</returns>
            QueryResult<CultureFiveDimension> EndGetCultureFiveDimensions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCultureFiveDimensionsForTwoCultures' operation.
            /// </summary>
            /// <param name="UserCultureID">The value for the 'UserCultureID' parameter of this action.</param>
            /// <param name="OtherCultureID">The value for the 'OtherCultureID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CultureAppService/GetCultureFiveDimensionsForTwoCulturesDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CultureAppService/GetCultureFiveDimensionsForTwoCultures", ReplyAction="http://tempuri.org/CultureAppService/GetCultureFiveDimensionsForTwoCulturesRespon" +
                "se")]
            IAsyncResult BeginGetCultureFiveDimensionsForTwoCultures(Nullable<int> UserCultureID, int OtherCultureID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCultureFiveDimensionsForTwoCultures'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCultureFiveDimensionsForTwoCultures'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCultureFiveDimensionsForTwoCultures' operation.</returns>
            QueryResult<CultureFiveDimension> EndGetCultureFiveDimensionsForTwoCultures(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCultures' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CultureAppService/GetCulturesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CultureAppService/GetCultures", ReplyAction="http://tempuri.org/CultureAppService/GetCulturesResponse")]
            IAsyncResult BeginGetCultures(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCultures'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCultures'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCultures' operation.</returns>
            QueryResult<Culture> EndGetCultures(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDomainCultureMappings' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CultureAppService/GetDomainCultureMappingsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CultureAppService/GetDomainCultureMappings", ReplyAction="http://tempuri.org/CultureAppService/GetDomainCultureMappingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDomainCultureMappings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDomainCultureMappings'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDomainCultureMappings'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDomainCultureMappings' operation.</returns>
            QueryResult<DomainCultureMapping> EndGetDomainCultureMappings(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationCultures' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CultureAppService/GetNegotiationCulturesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CultureAppService/GetNegotiationCultures", ReplyAction="http://tempuri.org/CultureAppService/GetNegotiationCulturesResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationCultures(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationCultures'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationCultures'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationCultures' operation.</returns>
            QueryResult<NegotiationCulture> EndGetNegotiationCultures(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SendAppsStatisticalsMessages' operation.
            /// </summary>
            /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
            /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
            /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
            /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CultureAppService/SendAppsStatisticalsMessagesDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CultureAppService/SendAppsStatisticalsMessages", ReplyAction="http://tempuri.org/CultureAppService/SendAppsStatisticalsMessagesResponse")]
            IAsyncResult BeginSendAppsStatisticalsMessages(string AppName, Guid UserID, Guid conversationID, string messageContent, string messageSubject, string messageSender, string messageReceiver, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSendAppsStatisticalsMessages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSendAppsStatisticalsMessages'.</param>
            /// <returns>The 'Boolean' returned from the 'SendAppsStatisticalsMessages' operation.</returns>
            bool EndSendAppsStatisticalsMessages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateUserCulture' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="cultureID">The value for the 'cultureID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CultureAppService/UpdateUserCultureDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CultureAppService/UpdateUserCulture", ReplyAction="http://tempuri.org/CultureAppService/UpdateUserCultureResponse")]
            IAsyncResult BeginUpdateUserCulture(Guid userID, int cultureID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateUserCulture'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateUserCulture'.</param>
            /// <returns>The 'Boolean' returned from the 'UpdateUserCulture' operation.</returns>
            bool EndUpdateUserCulture(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CultureAppService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CultureAppService/SubmitChanges", ReplyAction="http://tempuri.org/CultureAppService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CultureAppContextEntityContainer : EntityContainer
        {
            
            public CultureAppContextEntityContainer()
            {
                this.CreateEntitySet<ConversationCulture>(EntitySetOperations.All);
                this.CreateEntitySet<Culture>(EntitySetOperations.None);
                this.CreateEntitySet<CultureFiveDimension>(EntitySetOperations.All);
                this.CreateEntitySet<DomainCultureMapping>(EntitySetOperations.All);
                this.CreateEntitySet<NegotiationCulture>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'CultureFiveDimension' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.CultureApp.Data.Web")]
    public sealed partial class CultureFiveDimension : Entity
    {
        
        private EntityCollection<ConversationCulture> _conversationCultures;
        
        private int _cultureID;
        
        private EntityCollection<DomainCultureMapping> _domainCultureMappings;
        
        private Nullable<int> _idv;
        
        private Nullable<int> _lto;
        
        private Nullable<int> _mas;
        
        private EntityCollection<NegotiationCulture> _negotiationCultures;
        
        private Nullable<int> _pdi;
        
        private Nullable<int> _uai;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCultureIDChanging(int value);
        partial void OnCultureIDChanged();
        partial void OnIDVChanging(Nullable<int> value);
        partial void OnIDVChanged();
        partial void OnLTOChanging(Nullable<int> value);
        partial void OnLTOChanged();
        partial void OnMASChanging(Nullable<int> value);
        partial void OnMASChanged();
        partial void OnPDIChanging(Nullable<int> value);
        partial void OnPDIChanged();
        partial void OnUAIChanging(Nullable<int> value);
        partial void OnUAIChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CultureFiveDimension"/> class.
        /// </summary>
        public CultureFiveDimension()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ConversationCulture"/> entities.
        /// </summary>
        [Association("CultureFiveDimension_ConversationCulture", "CultureID", "PartnerCultureID")]
        [XmlIgnore()]
        public EntityCollection<ConversationCulture> ConversationCultures
        {
            get
            {
                if ((this._conversationCultures == null))
                {
                    this._conversationCultures = new EntityCollection<ConversationCulture>(this, "ConversationCultures", this.FilterConversationCultures, this.AttachConversationCultures, this.DetachConversationCultures);
                }
                return this._conversationCultures;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CultureID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CultureID
        {
            get
            {
                return this._cultureID;
            }
            set
            {
                if ((this._cultureID != value))
                {
                    this.OnCultureIDChanging(value);
                    this.ValidateProperty("CultureID", value);
                    this._cultureID = value;
                    this.RaisePropertyChanged("CultureID");
                    this.OnCultureIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DomainCultureMapping"/> entities.
        /// </summary>
        [Association("CultureFiveDimension_DomainCultureMapping", "CultureID", "CultureID")]
        [XmlIgnore()]
        public EntityCollection<DomainCultureMapping> DomainCultureMappings
        {
            get
            {
                if ((this._domainCultureMappings == null))
                {
                    this._domainCultureMappings = new EntityCollection<DomainCultureMapping>(this, "DomainCultureMappings", this.FilterDomainCultureMappings, this.AttachDomainCultureMappings, this.DetachDomainCultureMappings);
                }
                return this._domainCultureMappings;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IDV' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> IDV
        {
            get
            {
                return this._idv;
            }
            set
            {
                if ((this._idv != value))
                {
                    this.OnIDVChanging(value);
                    this.RaiseDataMemberChanging("IDV");
                    this.ValidateProperty("IDV", value);
                    this._idv = value;
                    this.RaiseDataMemberChanged("IDV");
                    this.OnIDVChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LTO' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> LTO
        {
            get
            {
                return this._lto;
            }
            set
            {
                if ((this._lto != value))
                {
                    this.OnLTOChanging(value);
                    this.RaiseDataMemberChanging("LTO");
                    this.ValidateProperty("LTO", value);
                    this._lto = value;
                    this.RaiseDataMemberChanged("LTO");
                    this.OnLTOChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MAS' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> MAS
        {
            get
            {
                return this._mas;
            }
            set
            {
                if ((this._mas != value))
                {
                    this.OnMASChanging(value);
                    this.RaiseDataMemberChanging("MAS");
                    this.ValidateProperty("MAS", value);
                    this._mas = value;
                    this.RaiseDataMemberChanged("MAS");
                    this.OnMASChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NegotiationCulture"/> entities.
        /// </summary>
        [Association("CultureFiveDimension_NegotiationCulture", "CultureID", "DefaultCultureID")]
        [XmlIgnore()]
        public EntityCollection<NegotiationCulture> NegotiationCultures
        {
            get
            {
                if ((this._negotiationCultures == null))
                {
                    this._negotiationCultures = new EntityCollection<NegotiationCulture>(this, "NegotiationCultures", this.FilterNegotiationCultures, this.AttachNegotiationCultures, this.DetachNegotiationCultures);
                }
                return this._negotiationCultures;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PDI' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> PDI
        {
            get
            {
                return this._pdi;
            }
            set
            {
                if ((this._pdi != value))
                {
                    this.OnPDIChanging(value);
                    this.RaiseDataMemberChanging("PDI");
                    this.ValidateProperty("PDI", value);
                    this._pdi = value;
                    this.RaiseDataMemberChanged("PDI");
                    this.OnPDIChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UAI' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> UAI
        {
            get
            {
                return this._uai;
            }
            set
            {
                if ((this._uai != value))
                {
                    this.OnUAIChanging(value);
                    this.RaiseDataMemberChanging("UAI");
                    this.ValidateProperty("UAI", value);
                    this._uai = value;
                    this.RaiseDataMemberChanged("UAI");
                    this.OnUAIChanged();
                }
            }
        }
        
        private void AttachConversationCultures(ConversationCulture entity)
        {
            entity.CultureFiveDimension = this;
        }
        
        private void DetachConversationCultures(ConversationCulture entity)
        {
            entity.CultureFiveDimension = null;
        }
        
        private bool FilterConversationCultures(ConversationCulture entity)
        {
            return (entity.PartnerCultureID == this.CultureID);
        }
        
        private void AttachDomainCultureMappings(DomainCultureMapping entity)
        {
            entity.CultureFiveDimension = this;
        }
        
        private void DetachDomainCultureMappings(DomainCultureMapping entity)
        {
            entity.CultureFiveDimension = null;
        }
        
        private bool FilterDomainCultureMappings(DomainCultureMapping entity)
        {
            return (entity.CultureID == this.CultureID);
        }
        
        private void AttachNegotiationCultures(NegotiationCulture entity)
        {
            entity.CultureFiveDimension = this;
        }
        
        private void DetachNegotiationCultures(NegotiationCulture entity)
        {
            entity.CultureFiveDimension = null;
        }
        
        private bool FilterNegotiationCultures(NegotiationCulture entity)
        {
            return (entity.DefaultCultureID == this.CultureID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._cultureID;
        }
    }
    
    /// <summary>
    /// The 'DomainCultureMapping' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.CultureApp.Data.Web")]
    public sealed partial class DomainCultureMapping : Entity
    {
        
        private EntityRef<CultureFiveDimension> _cultureFiveDimension;
        
        private Nullable<int> _cultureID;
        
        private int _domainCultureMappingID;
        
        private string _domainExt;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCultureIDChanging(Nullable<int> value);
        partial void OnCultureIDChanged();
        partial void OnDomainCultureMappingIDChanging(int value);
        partial void OnDomainCultureMappingIDChanged();
        partial void OnDomainExtChanging(string value);
        partial void OnDomainExtChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainCultureMapping"/> class.
        /// </summary>
        public DomainCultureMapping()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="CultureFiveDimension"/> entity.
        /// </summary>
        [Association("CultureFiveDimension_DomainCultureMapping", "CultureID", "CultureID", IsForeignKey=true)]
        [XmlIgnore()]
        public CultureFiveDimension CultureFiveDimension
        {
            get
            {
                if ((this._cultureFiveDimension == null))
                {
                    this._cultureFiveDimension = new EntityRef<CultureFiveDimension>(this, "CultureFiveDimension", this.FilterCultureFiveDimension);
                }
                return this._cultureFiveDimension.Entity;
            }
            set
            {
                CultureFiveDimension previous = this.CultureFiveDimension;
                if ((previous != value))
                {
                    this.ValidateProperty("CultureFiveDimension", value);
                    if ((previous != null))
                    {
                        this._cultureFiveDimension.Entity = null;
                        previous.DomainCultureMappings.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CultureID = value.CultureID;
                    }
                    else
                    {
                        this.CultureID = default(Nullable<int>);
                    }
                    this._cultureFiveDimension.Entity = value;
                    if ((value != null))
                    {
                        value.DomainCultureMappings.Add(this);
                    }
                    this.RaisePropertyChanged("CultureFiveDimension");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CultureID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CultureID
        {
            get
            {
                return this._cultureID;
            }
            set
            {
                if ((this._cultureID != value))
                {
                    this.OnCultureIDChanging(value);
                    this.RaiseDataMemberChanging("CultureID");
                    this.ValidateProperty("CultureID", value);
                    this._cultureID = value;
                    this.RaiseDataMemberChanged("CultureID");
                    this.OnCultureIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DomainCultureMappingID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int DomainCultureMappingID
        {
            get
            {
                return this._domainCultureMappingID;
            }
            set
            {
                if ((this._domainCultureMappingID != value))
                {
                    this.OnDomainCultureMappingIDChanging(value);
                    this.ValidateProperty("DomainCultureMappingID", value);
                    this._domainCultureMappingID = value;
                    this.RaisePropertyChanged("DomainCultureMappingID");
                    this.OnDomainCultureMappingIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DomainExt' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string DomainExt
        {
            get
            {
                return this._domainExt;
            }
            set
            {
                if ((this._domainExt != value))
                {
                    this.OnDomainExtChanging(value);
                    this.RaiseDataMemberChanging("DomainExt");
                    this.ValidateProperty("DomainExt", value);
                    this._domainExt = value;
                    this.RaiseDataMemberChanged("DomainExt");
                    this.OnDomainExtChanged();
                }
            }
        }
        
        private bool FilterCultureFiveDimension(CultureFiveDimension entity)
        {
            return (entity.CultureID == this.CultureID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._domainCultureMappingID;
        }
    }
    
    /// <summary>
    /// The 'NegotiationCulture' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.CultureApp.Data.Web")]
    public sealed partial class NegotiationCulture : Entity
    {
        
        private EntityRef<CultureFiveDimension> _cultureFiveDimension;
        
        private Nullable<int> _defaultCultureID;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private Guid _negotiationCultureID;
        
        private byte _negotiationCultureType;
        
        private Nullable<Guid> _negotiationID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDefaultCultureIDChanging(Nullable<int> value);
        partial void OnDefaultCultureIDChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnNegotiationCultureIDChanging(Guid value);
        partial void OnNegotiationCultureIDChanged();
        partial void OnNegotiationCultureTypeChanging(byte value);
        partial void OnNegotiationCultureTypeChanged();
        partial void OnNegotiationIDChanging(Nullable<Guid> value);
        partial void OnNegotiationIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NegotiationCulture"/> class.
        /// </summary>
        public NegotiationCulture()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="CultureFiveDimension"/> entity.
        /// </summary>
        [Association("CultureFiveDimension_NegotiationCulture", "DefaultCultureID", "CultureID", IsForeignKey=true)]
        [XmlIgnore()]
        public CultureFiveDimension CultureFiveDimension
        {
            get
            {
                if ((this._cultureFiveDimension == null))
                {
                    this._cultureFiveDimension = new EntityRef<CultureFiveDimension>(this, "CultureFiveDimension", this.FilterCultureFiveDimension);
                }
                return this._cultureFiveDimension.Entity;
            }
            set
            {
                CultureFiveDimension previous = this.CultureFiveDimension;
                if ((previous != value))
                {
                    this.ValidateProperty("CultureFiveDimension", value);
                    if ((previous != null))
                    {
                        this._cultureFiveDimension.Entity = null;
                        previous.NegotiationCultures.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DefaultCultureID = value.CultureID;
                    }
                    else
                    {
                        this.DefaultCultureID = default(Nullable<int>);
                    }
                    this._cultureFiveDimension.Entity = value;
                    if ((value != null))
                    {
                        value.NegotiationCultures.Add(this);
                    }
                    this.RaisePropertyChanged("CultureFiveDimension");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultCultureID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> DefaultCultureID
        {
            get
            {
                return this._defaultCultureID;
            }
            set
            {
                if ((this._defaultCultureID != value))
                {
                    this.OnDefaultCultureIDChanging(value);
                    this.RaiseDataMemberChanging("DefaultCultureID");
                    this.ValidateProperty("DefaultCultureID", value);
                    this._defaultCultureID = value;
                    this.RaiseDataMemberChanged("DefaultCultureID");
                    this.OnDefaultCultureIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationCultureID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid NegotiationCultureID
        {
            get
            {
                return this._negotiationCultureID;
            }
            set
            {
                if ((this._negotiationCultureID != value))
                {
                    this.OnNegotiationCultureIDChanging(value);
                    this.ValidateProperty("NegotiationCultureID", value);
                    this._negotiationCultureID = value;
                    this.RaisePropertyChanged("NegotiationCultureID");
                    this.OnNegotiationCultureIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationCultureType' value.
        /// </summary>
        [DataMember()]
        public byte NegotiationCultureType
        {
            get
            {
                return this._negotiationCultureType;
            }
            set
            {
                if ((this._negotiationCultureType != value))
                {
                    this.OnNegotiationCultureTypeChanging(value);
                    this.RaiseDataMemberChanging("NegotiationCultureType");
                    this.ValidateProperty("NegotiationCultureType", value);
                    this._negotiationCultureType = value;
                    this.RaiseDataMemberChanged("NegotiationCultureType");
                    this.OnNegotiationCultureTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationID' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> NegotiationID
        {
            get
            {
                return this._negotiationID;
            }
            set
            {
                if ((this._negotiationID != value))
                {
                    this.OnNegotiationIDChanging(value);
                    this.RaiseDataMemberChanging("NegotiationID");
                    this.ValidateProperty("NegotiationID", value);
                    this._negotiationID = value;
                    this.RaiseDataMemberChanged("NegotiationID");
                    this.OnNegotiationIDChanged();
                }
            }
        }
        
        private bool FilterCultureFiveDimension(CultureFiveDimension entity)
        {
            return (entity.CultureID == this.DefaultCultureID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._negotiationCultureID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'SessionService' domain service.
    /// </summary>
    public sealed partial class SessionContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class.
        /// </summary>
        public SessionContext() : 
                this(new WebDomainClient<ISessionServiceContract>(new Uri("citPOINT-CultureApp-Data-Web-SessionService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SessionService service URI.</param>
        public SessionContext(Uri serviceUri) : 
                this(new WebDomainClient<ISessionServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public SessionContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetSessionValue(string[] sessionKey, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            this.ValidateMethod("GetSessionValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSessionValue", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetSessionValue(string[] sessionKey)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            this.ValidateMethod("GetSessionValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSessionValue", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionValue(string[] sessionKey, string[] sessionValue, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            parameters.Add("sessionValue", sessionValue);
            this.ValidateMethod("SetSessionValue", parameters);
            return this.InvokeOperation("SetSessionValue", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionValue(string[] sessionKey, string[] sessionValue)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            parameters.Add("sessionValue", sessionValue);
            this.ValidateMethod("SetSessionValue", parameters);
            return this.InvokeOperation("SetSessionValue", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SessionContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SessionService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface ISessionServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSessionValue' operation.
            /// </summary>
            /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/GetSessionValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/GetSessionValue", ReplyAction="http://tempuri.org/SessionService/GetSessionValueResponse")]
            IAsyncResult BeginGetSessionValue(string[] sessionKey, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSessionValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSessionValue'.</param>
            /// <returns>The 'String' returned from the 'GetSessionValue' operation.</returns>
            string EndGetSessionValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetSessionValue' operation.
            /// </summary>
            /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
            /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/SetSessionValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/SetSessionValue", ReplyAction="http://tempuri.org/SessionService/SetSessionValueResponse")]
            IAsyncResult BeginSetSessionValue(string[] sessionKey, string[] sessionValue, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetSessionValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetSessionValue'.</param>
            void EndSetSessionValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/SubmitChanges", ReplyAction="http://tempuri.org/SessionService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SessionContextEntityContainer : EntityContainer
        {
            
            public SessionContextEntityContainer()
            {
            }
        }
    }
}
